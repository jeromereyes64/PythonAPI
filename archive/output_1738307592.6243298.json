{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 4}, "tests": {"0": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x000001F86950E270>, name = '--env', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option. You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Fallback value if no option of that name is **declared** via :hook:`pytest_addoption`.\n            Note this parameter will be ignored when the option is **declared** even if the option's value is ``None``.\n        :param skip: If ``True``, raise :func:`pytest.skip` if option is undeclared or has a ``None`` value.\n            Note that even if ``True``, if a default was specified it will be returned instead of a skip.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute '--env'\n\n.venv\\Lib\\site-packages\\_pytest\\config\\__init__.py:1694: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\npytestconfig = <_pytest.config.Config object at 0x000001F86950E270>\n\n    @pytest.fixture(scope=\"session\")\n    def api_client(pytestconfig):\n>       env = pytestconfig.getoption(\"--env\") or \"qa\"\nE       ValueError: no option named '--env'\n\ntests\\conftest.py:6: ValueError\n", "test_name": "test_TC01_Health_Check", "rerun": "0"}, "1": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x000001F86950E270>, name = '--env', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option. You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Fallback value if no option of that name is **declared** via :hook:`pytest_addoption`.\n            Note this parameter will be ignored when the option is **declared** even if the option's value is ``None``.\n        :param skip: If ``True``, raise :func:`pytest.skip` if option is undeclared or has a ``None`` value.\n            Note that even if ``True``, if a default was specified it will be returned instead of a skip.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute '--env'\n\n.venv\\Lib\\site-packages\\_pytest\\config\\__init__.py:1694: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\npytestconfig = <_pytest.config.Config object at 0x000001F86950E270>\n\n    @pytest.fixture(scope=\"session\")\n    def api_client(pytestconfig):\n>       env = pytestconfig.getoption(\"--env\") or \"qa\"\nE       ValueError: no option named '--env'\n\ntests\\conftest.py:6: ValueError\n", "test_name": "test_TC02_Login", "rerun": "0"}, "2": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x000001F86950E270>, name = '--env', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option. You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Fallback value if no option of that name is **declared** via :hook:`pytest_addoption`.\n            Note this parameter will be ignored when the option is **declared** even if the option's value is ``None``.\n        :param skip: If ``True``, raise :func:`pytest.skip` if option is undeclared or has a ``None`` value.\n            Note that even if ``True``, if a default was specified it will be returned instead of a skip.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute '--env'\n\n.venv\\Lib\\site-packages\\_pytest\\config\\__init__.py:1694: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\npytestconfig = <_pytest.config.Config object at 0x000001F86950E270>\n\n    @pytest.fixture(scope=\"session\")\n    def api_client(pytestconfig):\n>       env = pytestconfig.getoption(\"--env\") or \"qa\"\nE       ValueError: no option named '--env'\n\ntests\\conftest.py:6: ValueError\n", "test_name": "test_TC03_Get_User_Details", "rerun": "0"}, "3": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x000001F86950E270>, name = '--env', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option. You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Fallback value if no option of that name is **declared** via :hook:`pytest_addoption`.\n            Note this parameter will be ignored when the option is **declared** even if the option's value is ``None``.\n        :param skip: If ``True``, raise :func:`pytest.skip` if option is undeclared or has a ``None`` value.\n            Note that even if ``True``, if a default was specified it will be returned instead of a skip.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute '--env'\n\n.venv\\Lib\\site-packages\\_pytest\\config\\__init__.py:1694: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\npytestconfig = <_pytest.config.Config object at 0x000001F86950E270>\n\n    @pytest.fixture(scope=\"session\")\n    def api_client(pytestconfig):\n>       env = pytestconfig.getoption(\"--env\") or \"qa\"\nE       ValueError: no option named '--env'\n\ntests\\conftest.py:6: ValueError\n", "test_name": "test_TC04_Invalid_Endpoint", "rerun": "0"}}, "suite_name": "tests/Test_First_TestCase.py"}}}, "date": "January 31, 2025", "start_time": 1738307481.2929516, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "4", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "4"}